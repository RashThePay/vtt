// Basic Prisma schema for High Seas VTT
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id                    String   @id @default(uuid())
  username              String   @unique
  email                 String   @unique
  password              String
  emailVerified         Boolean  @default(false) @map("email_verified")
  emailVerificationToken String? @map("email_verification_token")
  passwordResetToken    String?  @map("password_reset_token")
  passwordResetExpires  DateTime? @map("password_reset_expires")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // User can be a player in multiple games
  players      Player[]
  refreshTokens RefreshToken[]
  
  @@map("users")
}

// Refresh tokens for JWT authentication
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// Games
model Game {
  id           String     @id @default(uuid())
  name         String
  gmId         String     @map("gm_id")
  status       GameStatus @default(SETUP)
  currentRound Int        @default(1) @map("current_round")
  currentPhase GamePhase  @default(WIND) @map("current_phase")
  settings     Json?      // Game configuration settings
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  // Relations
  players      Player[]
  gameLog      GameLog[]
  markets      Market[]
  missions     Mission[]
  gameMap      GameMap?
  
  @@map("games")
}

// Players in games
model Player {
  id           String @id @default(uuid())
  gameId       String @map("game_id")
  userId       String @map("user_id")
  captainName  String @map("captain_name")
  captainStats Json   @map("captain_stats") // { cunning, bravery, charisma, seamanship }
  reputation   Json   // { military, trading, pirate }
  gold         Int    @default(150)
  position     Json   // { x, y, region }
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  game         Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ship         Ship?
  gameLog      GameLog[]
  missions     Mission[]
  
  @@unique([gameId, userId])
  @@map("players")
}

// Ships
model Ship {
  id        String @id @default(uuid())
  playerId  String @unique @map("player_id")
  name      String
  stats     Json   // ship statistics (speed, durability, cannons, etc.)
  cargo     Json   // current cargo
  crew      Json   // crew information
  condition Json   // ship condition (hull damage, mast condition, etc.)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  player    Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@map("ships")
}

// Game action logging
model GameLog {
  id         String   @id @default(uuid())
  gameId     String   @map("game_id")
  playerId   String?  @map("player_id")
  actionType String   @map("action_type")
  details    Json
  timestamp  DateTime @default(now())
  
  // Relations
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player     Player?  @relation(fields: [playerId], references: [id], onDelete: SetNull)
  
  @@map("game_log")
}

// Markets and Economy
model Market {
  id           String   @id @default(uuid())
  gameId       String   @map("game_id")
  locationId   String   @map("location_id") // e.g., "port_royal", "tortuga"
  goodsPrices  Json     @map("goods_prices") // current prices for all goods
  supplyLevels Json     @map("supply_levels") // supply/demand levels
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  game         Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, locationId])
  @@map("markets")
}

// Missions
model Mission {
  id           String        @id @default(uuid())
  gameId       String        @map("game_id")
  title        String
  description  String
  requirements Json          // mission requirements
  rewards      Json          // mission rewards
  status       MissionStatus @default(AVAILABLE)
  assignedToId String?       @map("assigned_to_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  
  // Relations
  game         Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  assignedTo   Player?       @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  
  @@map("missions")
}

// Enums
enum GameStatus {
  SETUP
  ACTIVE
  PAUSED
  COMPLETED
}

enum GamePhase {
  WIND
  PLANNING
  MOVEMENT
  ACTION
  MAINTENANCE
}

enum MissionStatus {
  AVAILABLE
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

// Game Maps and Grid System
model GameMap {
  id          String   @id @default(uuid())
  gameId      String   @map("game_id")
  name        String   @default("Default Map")
  description String?
  gridSize    Int      @default(20) @map("grid_size") // 20x20 grid
  regions     Json     // Region definitions and weather data
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  game        Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  features    MapFeature[]
  
  @@unique([gameId]) // One map per game
  @@map("game_maps")
}

// Map Features (Islands, Ports, Reefs, etc.)
model MapFeature {
  id          String      @id @default(uuid())
  mapId       String      @map("map_id")
  type        FeatureType
  name        String
  description String?
  position    Json        // { x, y }
  properties  Json?       // Feature-specific properties
  isVisible   Boolean     @default(true) @map("is_visible")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  map         GameMap     @relation(fields: [mapId], references: [id], onDelete: Cascade)
  
  @@map("map_features")
}

enum FeatureType {
  ISLAND
  PORT
  REEF
  HAZARD
  WEATHER_SYSTEM
  FOG_BANK
  CURSED_WATER
  TREASURE_SITE
}
